//
// Created by michael on 9/21/20.
//

/*
 * SMART: string matching algorithms research tool.
 * Copyright (C) 2012  Simone Faro and Thierry Lecroq
 *
 * This program is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 *
 * contact the authors at: faro@dmi.unict.it, thierry.lecroq@univ-rouen.fr
 * download the tool at: http://www.dmi.unict.it/~faro/smart/
 *
 * file test.c
 * this program is used for testing correctness of algorithms
 * test the algorithm on different conditions and
 * check the number of occurrences reported
 */

#include <stdlib.h>
#include <stdio.h>
#include <string.h>
#include <time.h>
#include <sys/types.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include "SMART_TEST_1.h"

#define SIGMA 256
#define XSIZE 100
#define YSIZE 100
#define ATTEMPT 40 //numer of attempt to allocate shared memory
#define VERBOSE !strcmp(parameter,"-nv")
#define COLOR_RED   "\x1b[31m"
#define COLOR_GREEN "\x1b[32m"
#define COLOR_RESET "\x1b[0m"


int tshmid, eshmid, preshmid, pshmid, rshmid;
unsigned char T[64],P[40];
double *e_time, *pre_time;
int *count;

/* the brute force algorithm used for comparing occurrences */
int search(unsigned char *x, int m, unsigned char *y, int n) {
    int i, count, j;

    /* Searching */
    count = 0;
    for (j = 0; j <= n - m; ++j) {
        for (i = 0; i < m && x[i] == y[i + j]; ++i);
        if (i >= m)
            count++;
    }
    return count;
}

void printManual() {
    printf("\n\tSMART UTILITY FOR TESTING STRING MATCHING ALGORITHMS\n\n");
    printf("\tusage: ./test ALGONAME\n");
    printf("\tTest the program named \"algoname\" for correctness.\n");
    printf("\tThe program \"algoname\" must be located in source/bin/\n");
    printf("\tOnly programs in smart format can be tested.\n");
    printf("\n\n");
}

int execute(char *algoname, key_t pkey, int m, key_t tkey, int n, key_t rkey, key_t ekey, key_t prekey, int *count, int alpha) {
    char command[100];
    sprintf(command, "./source/bin/%s shared %d %d %d %d %d %d %d",algoname,pkey,m,tkey,n,rkey,ekey,prekey);
    //printf("%s\n",command);
    int res = system(command);
    if(!res) return (*count);
    else return -1;
}

int FREQ[SIGMA];

void free_shm() {
    shmdt(T);
    shmdt(P);
    shmdt(count);
    shmdt(e_time);
    shmdt(pre_time);
    shmctl(tshmid, IPC_RMID,0);
    shmctl(pshmid, IPC_RMID,0);
    shmctl(rshmid, IPC_RMID,0);
    shmctl(eshmid, IPC_RMID,0);
    shmctl(preshmid, IPC_RMID,0);
}

int attempt(unsigned char *P, int m, unsigned char*T, int n) {
    //printf("\b\b\b\b\b\b[%.3d%%]",(*rip)*100/18); fflush(stdout);
    char* message;
    int occur1 = search(P,m,T,n);
    int occur2 = search_test(P,m,T,n);
    if(occur2>=0 && occur1 != occur2) {
        printf(COLOR_RED"\nExpected: %i, Found: %i, Text: %s, Query: %s\n"COLOR_RESET,occur1,occur2,T,P);
    } else {
        printf(COLOR_GREEN"\nExpected: %i, Found: %i, Text: %s, Query: %s\n"COLOR_RESET,occur1,occur2,T,P);
    }
    return 1;
}

int s_test() {
    int i, j, h;


    // 1) search for "a" in "aaaaaaaaaa"
    strcpy((char*)P,"a");
    strcpy((char*)T,"aaaaaaaaaa");
    if(!attempt(P,1,T,10))
        exit(1);

    // 2) search for "aa" in "aaaaaaaaaa"
    strcpy((char*)P,"aa");
    strcpy((char*)T,"aaaaaaaaaa");
    if(!attempt(P,2,T,10))
        exit(1);

    // 3) search for "aaaaaaaaaa" in "aaaaaaaaaa"
    strcpy((char*)P,"aaaaaaaaaa");
    strcpy((char*)T,"aaaaaaaaaa");
    if(!attempt(P,10,T,10))
        exit(1);

    // 4) search for "b" in "aaaaaaaaaa"
    strcpy((char*)P,"b");
    strcpy((char*)T,"aaaaaaaaaa");
    if(!attempt(P,1,T,10))
        exit(1);

    // 5) search for "abab" in "ababababab"
    strcpy((char*)P,"ab");
    strcpy((char*)T,"ababababab");
    if(!attempt(P,2,T,10))
        exit(1);

    // 6) search for "a" in "ababababab"
    strcpy((char*)P,"a");
    strcpy((char*)T,"ababababab");
    if(!attempt(P,1,T,10))
        exit(1);

    // 7) search for "aba" in "ababababab"
    strcpy((char*)P,"aba");
    strcpy((char*)T,"ababababab");
    if(!attempt(P,3,T,10))
        exit(1);

    // 8) search for "abc" in "ababababab"
    strcpy((char*)P,"abc");
    strcpy((char*)T,"ababababab");
    if(!attempt(P,3,T,10))
        exit(1);

    // 9) search for "ba" in "ababababab"
    strcpy((char*)P,"ba");
    strcpy((char*)T,"ababababab");
    if(!attempt(P,2,T,10))
        exit(1);

    // 10) search for "babbbbb" in "ababababab"
    strcpy((char*)P,"babbbbb");
    strcpy((char*)T,"ababababab");
    if(!attempt(P,7,T,10))
        exit(1);

    // 11) search for "bcdefg" in "bcdefghilm"
    strcpy((char*)P,"bcdefg");
    strcpy((char*)T,"bcdefghilm");
    if(!attempt(P,6,T,10))
        exit(1);

    // 12) search for rand in rand
    for(h=0; h<10; h++) T[h] = rand()%128;
    for(h=0; h<4; h++) P[h] = T[h];
    T[YSIZE] = P[4] = '\0';
    if(!attempt(P,4,T,10))
        exit(1);

    // 13) search for rand in rand
    for(h=0; h<10; h++) T[h] = rand()%128;
    for(h=0; h<4; h++) P[h] = T[h];
    T[10] = P[4] = '\0';
    if(!attempt(P,4,T,10))
        exit(1);

    // 14) search for rand in rand
    for(h=0; h<64; h++) T[h] = rand()%128;
    for(h=0; h<40; h++) P[h] = T[h];
    T[64] = P[40] = '\0';
    if(!attempt(P,40,T,64))
        exit(1);

    // 15) search for rand in rand
    for(h=0; h<64; h++) T[h] = rand()%128;
    for(h=0; h<40; h++) P[h] = T[h];
    T[64] = P[40] = '\0';
    if(!attempt(P,40,T,64))
        exit(1);

    // 16) search for rand in rand
    for(h=0; h<64; h++) T[h] = 'a';
    for(h=0; h<40; h++) P[h] = 'a';
    T[64] = P[40] = '\0';
    if(!attempt(P,40,T,64))
        exit(1);

    // 17) search for rand in rand
    for(h=0; h<64; h+=2) T[h] = 'a';
    for(h=1; h<64; h+=2) T[h] = 'b';
    for(h=0; h<40; h+=2) P[h] = 'a';
    for(h=1; h<40; h+=2) P[h] = 'b';
    T[64] = P[40] = '\0';
    if(!attempt(P,40,T,64))
        exit(1);

    // 18) search for rand in rand
    for(h=0; h<64; h+=2) T[h] = 'a';
    for(h=1; h<64; h+=2) T[h] = 'b';
    for(h=0; h<40; h+=2) P[h] = 'a';
    for(h=1; h<40; h+=2) P[h] = 'b';
    P[39] = 'c';
    T[64] = P[40] = '\0';
    if(!attempt(P,40,T,64))
        exit(1);

    // 19) search for "babbbbb" in "abababbbbb"
    strcpy((char*)P,"babbbbb");
    strcpy((char*)T,"abababbbbb");
    if(!attempt(P,7,T,10))
        exit(1);

    // 20) search for "bababb" in "abababbbbb"
    strcpy((char*)P,"bababb");
    strcpy((char*)T,"abababbbbb");
    if(!attempt(P,6,T,10))
        exit(1);


    //free shared memory
    free_shm();
    return 0;
}

